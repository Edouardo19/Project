{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ddecfd2b",
   "metadata": {},
   "source": [
    "Create a program where the user can play a game of rock, paper, scissors against a computer. Set a play choice (rock, paper, or scissors) for the computer player and during the program, request for the user to input their play choice.\n",
    "\n",
    "The rules in Rock, Paper, Scissors are:\n",
    "\n",
    "Rock beats scissors\n",
    "Scissors beats paper\n",
    "Paper beats rock\n",
    "If the user wins, then display \"You win!\" If they lose against the computer, then display \"You lose.\" If the computer and the user have the same play choice, display \"It's a draw.\"\n",
    "\n",
    "BONUS: Randomize the play choice for the computer (hint: Python has a library called random). Also ask the user if they would like to play again. If they do, start the game again but if not, thank the user for playing the game."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0920225d",
   "metadata": {},
   "outputs": [],
   "source": [
    "stop = False\n",
    "while not stop :\n",
    "choices = [\"rock\", \"paper\", \"scissors\"]\n",
    "import random as rand\n",
    "computer = input(\"Enter a choice\")\n",
    "computer_choices = choice.random()\n",
    "user_choices = choices.random()\n",
    "user = input(\"Enter a choice\") \n",
    "    stop = input(\"Continue? (y/n)\") == 'n'\n",
    "if user_choice == rock and computer_choice == scissors :\n",
    "    print(\"you win\")\n",
    "elif user_choice == paper and computer_choice == rock :\n",
    "    print(\"you win\")\n",
    "elif user_choice == scissors and computer_choice == paper :\n",
    "    print(\"you win\")\n",
    "else :\n",
    "    print(\"you lose\")\n",
    "    \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
